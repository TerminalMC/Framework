plugins {
    id("multiloader-loader")
    id("net.minecraftforge.gradle")
    id("org.spongepowered.mixin")
}

dependencies {
    minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
    annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")

    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixinextras_version}")) {
        jarJar.ranged(it, "[${mixinextras_version},)")
    }

    implementation("me.shedaniel.cloth:cloth-config-forge:${clothconfig_version_forge}")
    implementation("maven.modrinth:1eAoo2KR:${yacl_version_forge}")
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")
    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

sourceSets.main.resources.srcDir "src/generated/resources"

jar.finalizedBy("reobfJar")

minecraft {
    mappings channel: "official", version: minecraft_version
    copyIdeResources = true // Calls processResources when in dev

    if (file("src/main/resources/META-INF/accesstransformer.cfg").exists()) {
        accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}
